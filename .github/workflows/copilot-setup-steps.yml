name: Copilot Setup Steps

# This workflow documents the setup steps for GitHub Copilot agents
# It does not run automatically - it serves as a reference for agents
# working on this repository

on:
  workflow_dispatch:

jobs:
  copilot-setup-steps:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Install Bun (required package manager)
      - name: Install Bun
        run: |
          curl -fsSL https://bun.sh/install | bash
          source ~/.bash_profile
          bun --version

      # Step 2: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: |
          source ~/.bash_profile
          bun install

      # Step 4: Verify linting
      - name: Run linter
        run: |
          source ~/.bash_profile
          bun run lint

      # Step 5: Fix linting issues (if any)
      - name: Fix linting issues
        run: |
          source ~/.bash_profile
          bun run lint:fix

      # Step 6: Run tests
      - name: Run tests
        run: |
          source ~/.bash_profile
          bun run test

      # Step 7: Build the project
      - name: Build project
        run: |
          source ~/.bash_profile
          bun run build

      # Step 8: Preview the build
      - name: Preview build (optional)
        run: |
          source ~/.bash_profile
          bun run preview &
          sleep 5
      
      # Step 9: Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y
          gh --version
      
      # Step 10: Authenticate GitHub CLI
      - name: Authenticate GitHub CLI with workflow token
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 11: Demonstrate GitHub CLI - List Pull Requests
      - name: Demonstrate gh pr list
        run: |
          echo "=== GitHub CLI: Listing Pull Requests ==="
          echo ""
          echo "Command: gh pr list"
          echo ""
          gh pr list --limit 10
          echo ""
          echo "Command: gh pr list --state open"
          echo ""
          gh pr list --state open --limit 10
          echo ""
          echo "Command: gh pr list --state closed --limit 5"
          echo ""
          gh pr list --state closed --limit 5 || echo "No closed PRs or not enough PRs"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 12: Demonstrate GitHub CLI - View PR with Comments
      - name: Demonstrate gh pr view with comments
        run: |
          echo "=== GitHub CLI: Viewing Pull Request Details ==="
          echo ""
          # Get the first open PR number if it exists
          PR_NUMBER=$(gh pr list --state open --limit 1 --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [ -n "$PR_NUMBER" ]; then
            echo "Found open PR #$PR_NUMBER"
            echo ""
            echo "Command: gh pr view $PR_NUMBER"
            echo ""
            gh pr view "$PR_NUMBER"
            echo ""
            echo "Command: gh pr view $PR_NUMBER --comments"
            echo ""
            gh pr view "$PR_NUMBER" --comments
          else
            echo "No open pull requests found to demonstrate 'gh pr view --comments'"
            echo ""
            echo "Example command usage:"
            echo "  gh pr view <PR_NUMBER> --comments"
            echo ""
            echo "This command would show:"
            echo "  - PR title and description"
            echo "  - PR metadata (status, reviewers, labels, etc.)"
            echo "  - All comments on the PR"
            echo "  - Review comments inline with code"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Additional notes for developers
      - name: Development workflow notes
        run: |
          echo "=== Development Workflow ==="
          echo "Development server: bun run dev (runs on http://localhost:5173)"
          echo "Test UI: bun run test:dev (interactive testing)"
      
      - name: Project requirements
        run: |
          echo "=== Totem Project Setup Requirements ==="
          echo ""
          echo "Prerequisites:"
          echo "  - Bun v1.2 or later (REQUIRED)"
          echo "  - Node.js v20 or later (for tool compatibility)"
          echo ""
          echo "Technology Stack:"
          echo "  - Bundler: Vite 6.x"
          echo "  - Framework: React 19"
          echo "  - UI Library: Mantine 7.x"
          echo "  - TypeScript: 5.7.x (strict mode)"
          echo "  - Testing: Vitest 2.x with jsdom"
          echo "  - Linting: ESLint 9.x + Prettier 3.x"
          echo ""
          echo "Key Commands (all require 'bun run' prefix):"
          echo "  - dev        : Start development server"
          echo "  - lint       : Check code style"
          echo "  - lint:fix   : Fix linting issues (REQUIRED before commit)"
          echo "  - test       : Run test suite (~3-4s after first run)"
          echo "  - test:dev   : Run tests in watch mode with UI"
          echo "  - build      : Build for production (~7s)"
          echo "  - preview    : Preview production build"
          echo ""
          echo "Pre-commit Checklist:"
          echo "  1. Run 'bun run lint:fix' (REQUIRED)"
          echo "  2. Run 'bun run test' (all tests must pass)"
          echo "  3. Run 'bun run build' (verify no errors)"
          echo "  4. Check 'git diff' after lint:fix (should be empty)"
          echo ""
          echo "Special Notes:"
          echo "  - Tests download tttool binary on first run (60s timeout)"
          echo "  - Subsequent test runs take only 3-4 seconds"
          echo "  - Web Workers must be imported with '?worker' suffix"
          echo "  - Build output goes to 'dist/' directory"
          echo "  - CI requires clean lint:fix before merge"
          echo ""
          echo "Documentation:"
          echo "  - README.md          : User-facing documentation"
          echo "  - CONTRIBUTING.md    : Development setup and guidelines"
          echo "  - .github/copilot-instructions.md : Detailed developer instructions"

